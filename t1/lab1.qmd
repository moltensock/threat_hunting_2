---
title: "lab1"
author: "Федосимова Александра Дмитриевна"
format:   
  md:
    output-file: README.md
editor_options: 
  chunk_output_type: inline
---

Прохождение курса по R в RStudio через пакет swirl (R Programming: The basics of programming in R)

## Цель работы

1. Познакомится с синтаксисом языка программирования R \n

2. Познакомиться с пакетом swirl \n

3. Оформить отчет \n

## Исходные данные

1.  Ноутбук с ОС Windows 10
2.  RStudio
3.  Пакет swirl

## План

1. Установить библиотеку `swirl`
2. Запустить в консоли `swirl::swirl()`
3. Пройти 4 урока по языку программирования R

## Задание

Пройти 4 курса по основам языка R.

## Ход выполнения работы

Установка swirl
Нужно ввести   
```{}
install.packages("swirl")   
swirl::swirl()
```

### Задание 1: Basic Building Blocks

```{r}
5 + 7
```

```{r}
x <- 5 + 7
x
```

```{r}
y <- x - 3
y
```

```{r}
z <- c(1.1, 9, 3.14)
```

```{r}
?c
```

```{r}
z
```

```{r}
c(z, 555, z)
```

```{r}
z * 2 + 100
```

```{r}
my_sqrt <- sqrt(z - 1)
```

| Before we view the contents of the my_sqrt variable, what do you think it contains?

1: a vector of length 0 (i.e. an empty vector) \n
2: a single number (i.e a vector of length 1) \n
3: a vector of length 3 \n

3

```{r}
my_sqrt
```

```{r}
my_div <- z / my_sqrt
```

| Which statement do you think is true?

1: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on... 2: my_div is undefined 3: my_div is a single number (i.e a vector of length 1)

Выбор:1

```{r}
my_div
```

```{r}
c(1, 2, 3, 4)
```

```{r}
c(1, 2, 3, 4) + c(0, 10)
```

```{r}
c(1, 2, 3, 4) + c(0, 10, 100)
```

```{r}
z * 2 + 1000
```

```{r}
my_div
```

### Задание 2: Workspace and Files

Determine which directory your R session is using as its current working directory using getwd().
```{r}
getwd()
```

List all the objects in your local workspace using ls().
```{r}
ls()
```

```{r}
x <- 9
```

```{r}
ls()
```

List all the files in your working directory using list.files() or dir().
```{r}
dir()
```

```{r}
?list.files
```

Using the args() function on a function name is also a handy way to see what arguments a function can take.

```{r}
args(list.files) 
```

Assign the value of the current working directory to a variable called "old.dir".
```{r}
old.dir <- getwd()
```

Use dir.create() to create a directory in the current working directory called "testdir".
```{r}
dir.create("testdir")
```

Use setwd("testdir") to set your working directory to "testdir".
```{r}
setwd("testdir")
```

Create a file in your working directory called "mytest.R" using the file.create() function.
```{r}
file.create("mytest.R")
```

Let's check this by listing all the files in the current directory.
```{r}
list.files() 
```

Check to see if "mytest.R" exists in the working directory using the file.exists() function.
```{r}
file.exists("mytest.R")
```

Access information about the file "mytest.R" by using file.info().
```{r}
file.info("mytest.R")
```

Change the name of the file "mytest.R" to "mytest2.R" by using file.rename().
```{r}
file.rename("mytest.R", "mytest2.R")
```

Make a copy of "mytest2.R" called "mytest3.R" using file.copy().
```{r}
file.copy("mytest2.R", "mytest3.R")
```

Provide the relative path to the file "mytest3.R" by using file.path().
```{r}
file.path("mytest3.R")
```

You can use file.path to construct file and directory paths that are independent of the operating system your R code is running on. Pass 'folder1' and 'folder2' as arguments to file.path to make a platform-independent pathname.
```{r}
file.path("folder1", "folder2")
```

Take a look at the documentation for dir.create by entering ?dir.create . Notice the 'recursive' argument. In order to create nested directories, 'recursive' must be set to TRUE.
```{r}
?dir.create
```

Create a directory in the current working directory called "testdir2" and a subdirectory for it called "testdir3", all in one command by using dir.create() and file.path().
```{r}
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
```

Go back to your original working directory using setwd(). (Recall that we created the variable old.dir with the full path for the orginal working directory at the start of these questions.)
```{r}
setwd(old.dir)
```

### Задание 3: Sequences of Numbers 

The simplest way to create a sequence of numbers in R is by using the `:` operator. Type 1:20 to see how it works.
```{r}
1:20
```

```{r}
pi:10
```

```{r}
15:1
```

```{r}
help(`:`)
```

```{r}
?`:`
```

```{r}
seq(1, 20)
```

```{r}
seq(0, 10, by=0.5)
```

```{r}
my_seq <- seq(5, 10, length=30)
```

```{r}
length(my_seq)
```

```{r}
1:length(my_seq)
```

```{r}
seq(along.with = my_seq)
```

```{r}
seq_along(my_seq)
```

```{r}
rep(0, times = 40)
```

```{r}
rep(c(0, 1, 2), times = 10)
```

```{r}
rep(c(0, 1, 2), each = 10)
```

### Задание 4: Vectors

```{r}
num_vect <- c(0.5, 55, -10, 6)
```

Use tf <- num_vect < 1 to assign the result of num_vect < 1 to a variable called tf.
```{r}
tf <- num_vect < 1
```

What do you think tf will look like?

1: a single logical value
2: a vector of 4 logical values

2

```{r}
tf
```

```{r}
num_vect >= 6
```

 (3 > 5) & (4 == 4)

1: TRUE
2: FALSE

Выбор:2

 (TRUE == TRUE) | (TRUE == FALSE)

1: FALSE
2: TRUE

Выбор:2

((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: FALSE
2: TRUE

Выбор:2

```{r}
my_char <- c("My", "name", "is")
```

```{r}
my_char
```

```{r}
paste(my_char, collapse = " ")
```

```{r}
my_name <- c(my_char, "Polina")
```

```{r}
my_name
```

Now, use the paste() function once more to join the words in my_name together into a single character string. Don't forget to say collapse = " "!
```{r}
paste(my_name, collapse = " ")
```

```{r}
paste("Hello", "world!", sep = " ")
```

```{r}
paste(1:3, c("X", "Y", "Z"), sep = "")
```

```{r}
paste(LETTERS, 1:4, sep = "-")
```

## Оценка результатов

Были получены базовые знания синтаксиса языка программирования R.

## Вывод

Я ознакомилась с основным синтаксисом языка программирования R. Было пройдено 4 урока из пакета swirl.